Part I


#define SSDSIZE 7       // number of segments in SSD

#define DIGSIZE 10      // number of different symbols to decode

int ssdtab[DIGSIZE][SSDSIZE] =
{
  {1, 1, 1, 1, 1, 1, 0},
  {0, 1, 1, 0, 0, 0, 0},
  {1, 1, 0, 1, 1, 0, 1},
  {1, 1, 1, 1, 0, 0, 1},
  {0, 1, 1, 0, 0, 1, 1},
  {1, 0, 1, 1, 0, 1, 1},
  {1, 0, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 0, 0},
  {1, 1, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 1, 1}
};

#define  ssdpin(i)  (i+2) // a to pin 2, b to pin 3 etc so the pin offset is +2

void ssddecode(int a)
{
  int j;
 
  for (j = 0; j < SSDSIZE; j++)
  digitalWrite(ssdpin(j),  ssdtab[a][j] == 1 ? HIGH : LOW);
}

void loop()
{
  static unsigned i;

  ssddecode(i++ % 10);
  delay(500);
}

// the setup routine runs once when you press reset:
void setup() 
{
  int  j;

  for (j = 0; j < SSDSIZE; j++)
  pinMode(ssdpin(j), OUTPUT);
}
Creating a mapping table.

Part II

attachInterrupt(interrupt, ISR, mode)

attachInterrupt(pin, ISR, mode) (Arduino Due only)

pin: the pin number (Arduino Due only) ISR: the ISR to call when the interrupt occurs; this function must take no parameters and return nothing. This function is sometimes referred to as an interrupt service routine. mode: defines when the interrupt should be triggered. Four contstants are predefined as valid values:

LOW
to trigger the interrupt whenever the pin is low
CHANGE
to trigger the interrupt whenever the pin changes value
RISING
to trigger when the pin goes from low to high
FALLING
for when the pin goes from high to low
HIGH(Due only)
to trigger the interrupt whenever the pin is high
(The prototype of attachInterrupt is Quoted from Arduino website)


////////////////////////////code for seven segment display///////////////////////////////////

#define SSDSIZE 7       // number of segments in SSD

#define DIGSIZE 10      // number of different symbols to decode

int ssdtab[DIGSIZE][SSDSIZE] =
{
  {1, 1, 1, 1, 1, 1, 0},
  {0, 1, 1, 0, 0, 0, 0},
  {1, 1, 0, 1, 1, 0, 1},
  {1, 1, 1, 1, 0, 0, 1},
  {0, 1, 1, 0, 0, 1, 1},
  {1, 0, 1, 1, 0, 1, 1},
  {1, 0, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 0, 0},
  {1, 1, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 1, 1}
};

#define  ssdpin(i)  (i+2) // a to pin 2, b to pin 3 etc so the pin offset is +2

void ssddecode(int a)
{
  int j;
 
  for (j = 0; j < SSDSIZE; j++)
  digitalWrite(ssdpin(j),  ssdtab[a][j] == 1 ? HIGH : LOW);
}

///////////////////////////////////////////////////////////////

int pin = 9;
volatile int number = 0;
volatile int state = 0;
void setup()
{
  int  j;

  for (j = 0; j < SSDSIZE; j++)
  pinMode(ssdpin(j), OUTPUT);

  attachInterrupt(pin, buttondown, FALLING);

//  REG_PIOC_IFER |= 1<<21; // Input Filter Enable Register
//  PIOC->PIO_DIFSR |= 1<<21; // Debouncing Input Filter Select Register
//  PIOC->PIO_SCDR |= 0xff; // Slow Clock Divider Register
}

void loop()
{
  if(number>=10) number=0;
  ssddecode(number);
  delay(100);
}

void buttondown()
{
  number++;
}
(I found a debounce example here: http://forum.arduino.cc/index.php?topic=138887.0)

Part III


////////////////////////////code for seven segment display///////////////////////////////////

#define SSDSIZE 7       // number of segments in SSD

#define DIGSIZE 10      // number of different symbols to decode

int ssdtab[DIGSIZE][SSDSIZE] =
{
  {1, 1, 1, 1, 1, 1, 0},
  {0, 1, 1, 0, 0, 0, 0},
  {1, 1, 0, 1, 1, 0, 1},
  {1, 1, 1, 1, 0, 0, 1},
  {0, 1, 1, 0, 0, 1, 1},
  {1, 0, 1, 1, 0, 1, 1},
  {1, 0, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 0, 0},
  {1, 1, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 1, 1}
};

#define  ssdpin(i)  (i+2) // a to pin 2, b to pin 3 etc so the pin offset is +2

void ssddecode(int a)
{
  int j;
 
  for (j = 0; j < SSDSIZE; j++)
  digitalWrite(ssdpin(j),  ssdtab[a][j] == 1 ? HIGH : LOW);
}

///////////////////////////////////////////////////////////////

int pin = 9;
volatile int number = 0;
int state=0;
void setup()
{
  int  j;

  for (j = 0; j < SSDSIZE; j++)
  pinMode(ssdpin(j), OUTPUT);

  attachInterrupt(pin, buttondown, FALLING);

  REG_PIOC_IFER |= 1<<21; // Input Filter Enable Register
  PIOC->PIO_DIFSR |= 1<<21; // Debouncing Input Filter Select Register
  PIOC->PIO_SCDR |= 0xff; // Slow Clock Divider Register
}

void loop()
{

  if(state==1){ number++; if(number>=10) number=0;}
  else if(state==0){number--; if(number<0) number=9;}
  ssddecode(number);
  delay(1000);
}

void buttondown()
{
  if(state==1) state=0;
  else if(state==0) state=1;
}
Use 'state', to store the state of up or down counting(default is counting up, and on click turn to counting down, click again, reverse again...)

Add additional code in setup() to enable debouncing function of pin9: REG_PIOC_IFER |= 1<<21; PIOC->PIO_DIFSR |= 1<<21; PIOC->PIO_SCDR |= 0xff;

The Arduino pin9 is mapped to PIOC 21, here REG_PIOC_IFER means Input Filter enable register, if it's '1' then the filter function will be enabled. And DIFSR here is to enable debouncing filter(otherwise, it will be glitch filter), and set PIO_SCDR 0xff which means to divide system clock 0xff times and get a slow clock signal.

Part IV


////////////////////////////code for seven segment display///////////////////////////////////

#define SSDSIZE 7       // number of segments in SSD

#define DIGSIZE 10      // number of different symbols to decode

int ssdtab[DIGSIZE][SSDSIZE] =
{
  {1, 1, 1, 1, 1, 1, 0},
  {0, 1, 1, 0, 0, 0, 0},
  {1, 1, 0, 1, 1, 0, 1},
  {1, 1, 1, 1, 0, 0, 1},
  {0, 1, 1, 0, 0, 1, 1},
  {1, 0, 1, 1, 0, 1, 1},
  {1, 0, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 0, 0},
  {1, 1, 1, 1, 1, 1, 1},
  {1, 1, 1, 0, 0, 1, 1}
};

#define  ssdpin(i)  (i+2) // a to pin 2, b to pin 3 etc so the pin offset is +2

void ssddecode(int a)
{
  int j;
 
  for (j = 0; j < SSDSIZE; j++)
  digitalWrite(ssdpin(j),  ssdtab[a][j] == 1 ? HIGH : LOW);
}

///////////////////////////////////////////////////////////////

int pin = 9;
volatile int number = 0;
volatile int state = 0;
void setup()
{
  int  j;

  for (j = 0; j < SSDSIZE; j++)
  pinMode(ssdpin(j), OUTPUT);

  attachInterrupt(pin, buttondown, FALLING);

  REG_PIOC_IFER |= 1<<21; // Input Filter Enable Register
  PIOC->PIO_DIFSR |= 1<<21; // Debouncing Input Filter Select Register
  PIOC->PIO_SCDR |= 0xff; // Slow Clock Divider Register
}

void loop()
{
  if(number>=10) number=0;
  ssddecode(number);
  delay(100);
}

void buttondown()
{
  number++;
}
Add additional code in setup() to enable debouncing function of pin9: REG_PIOC_IFER |= 1<<21; PIOC->PIO_DIFSR |= 1<<21; PIOC->PIO_SCDR |= 0xff;

The Arduino pin9 is mapped to PIOC 21, here REG_PIOC_IFER means Input Filter enable register, if it's '1' then the filter function will be enabled. And DIFSR here is to enable debouncing filter(otherwise, it will be glitch filter), and set PIO_SCDR 0xff which means to divide system clock 0xff times and get a slow clock signal.